{"version":3,"sources":["svg/bysykkel-logo.svg","svg/bike.svg","PieChart.tsx","types.ts","LineChart.tsx","utils.ts","App.tsx","index.js"],"names":["PieChart","props","pies","Object","entries","years","map","year","label","id","value","className","data","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","colors","scheme","borderWidth","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsTextColor","isInteractive","legends","norwegianMonths","LineChart","allYearsWithMonths","color","month","x","y","monthsData","forEach","monthData","find","yearString","m","monthName","trips","getAllMonthsInYearArray","xScale","type","yScale","min","max","stacked","reverse","yFormat","curve","axisTop","axisRight","lineWidth","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","enableGridX","enableGridY","enablePoints","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabelYOffset","areaOpacity","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","addTripToSimpleDictionary","dictionary","key","entryYear","buildDataStructure","months","stations","detailedMonthsData","numberOfTrips","length","trip","date","Date","_tripStarted","getFullYear","toString","getMonth","mmyyyy","startStation","_startStation","_title","endStation","_endStation","monthNumber","addTripToDetailedMonthsDataDictionary","simpleDictionaryToSortedArray","dict","sort","numberOfTrips1","App","bikeStats","monthsSortedDescendingTrips","stationsSortedDescendingTrips","src","logo","alt","toLowerCase","bike","slice","numberOfTripsPerMonth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f51db987.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bysykkel-logo.95909212.svg\";","export default __webpack_public_path__ + \"static/media/bike.25010c39.svg\";","import './App.css';\nimport React from 'react';\nimport {ResponsivePie} from '@nivo/pie'\n\ninterface Props {\n    years: { [key: string]: number };\n}\n\ninterface PieData {\n    id: string;\n    value: number;\n    label: string;\n}\n\nconst PieChart = (props: Props) => {\n    const pies = Object.entries(props.years).map(([year, numberOfTrips]) => {\n            const piePart: PieData =\n                {\n                    label: year,\n                    id: year,\n                    value: numberOfTrips\n                }\n            return piePart;\n        }\n    )\n    return (\n        <div className=\"pie-element\">\n            <ResponsivePie\n                data={pies}\n                margin={{top: 40, right: 80, bottom: 80, left: 80}}\n                innerRadius={0.5}\n                padAngle={0.7}\n                cornerRadius={3}\n                activeOuterRadiusOffset={8}\n                colors={{scheme: 'red_yellow_green'}}\n                borderWidth={1}\n                borderColor={{from: 'color', modifiers: [['darker', 0]]}}\n                arcLinkLabelsSkipAngle={10}\n                arcLinkLabelsTextColor=\"#333333\"\n                arcLinkLabelsThickness={2}\n                arcLinkLabelsColor={{from: 'color'}}\n                arcLabelsTextColor={{from: 'color', modifiers: [['darker', 2]]}}\n                isInteractive={true}\n                legends={[]}\n            />\n        </div>\n    )\n}\n\n\nexport default PieChart;\n","export const norwegianMonths =\n    [\"Januar\", \"Februar\", \"Mars\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Desember\"];\n\nexport interface DetailedMonthData {\n    monthNumber: number;\n    monthName: string;\n    year: number;\n    trips: number;\n    date: Date;\n    yearString: string;\n}\n\nexport interface BikeStats {\n    years: { [key: string]: number };\n    months: { [key: string]: number };\n    stations: { [key: string]: number };\n    detailedMonthsData: { [key: string]: DetailedMonthData };\n    numberOfTrips: number;\n}","import './App.css';\nimport React from 'react';\nimport {ResponsiveLine} from '@nivo/line';\nimport {DetailedMonthData, norwegianMonths} from \"./types\";\n\ninterface Props {\n    years: { [key: string]: number };\n    monthsData: { [key: string]: DetailedMonthData }\n}\n\ninterface LineChartDataYear {\n    id: string; // Year\n    color: string; // Not used?\n    data: LineChartDataMonth[]\n}\n\ninterface LineChartDataMonth {\n    x: string; // Month\n    y: number; // Trips\n}\n\nconst LineChart = (props: Props) => {\n\n    function getAllMonthsInYearArray() {\n\n\n        let allYearsWithMonths: LineChartDataYear[] = Object.entries(props.years).map(([year, _]) => {\n                let emptyMonths: LineChartDataMonth[] = norwegianMonths.map(month => {\n                        return {x: month, y: 0}\n                    }\n                )\n                return {\n                    id: year,\n                    color: \"red\",\n                    data: emptyMonths\n                }\n\n            }\n        )\n\n        Object.entries(props.monthsData).forEach(([monthKey, monthData]) => {\n                let year = allYearsWithMonths.find(y => y.id === monthData.yearString);\n                if (year) {\n                    let month = year.data.find(m => m.x === monthData.monthName)\n                    if (month) {\n                        month.y = monthData.trips;\n                    }\n                }\n            }\n        )\n\n        return allYearsWithMonths\n    }\n\n    return (<div className=\"line-chart-element\">\n        <ResponsiveLine\n            data={getAllMonthsInYearArray()}\n            margin={{top: 50, right: 110, bottom: 50, left: 60}}\n            xScale={{type: 'point'}}\n            yScale={{type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false}}\n            yFormat=\" >-.2f\"\n            curve=\"basis\"\n            axisTop={null}\n            axisRight={null}\n            lineWidth={6}\n            axisBottom={{\n                orient: 'bottom',\n                tickSize: 4,\n                tickPadding: 4,\n                tickRotation: 0,\n                legend: '',\n                legendOffset: -60,\n                legendPosition: 'middle'\n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Antall turer',\n                legendOffset: -40,\n                legendPosition: 'middle'\n            }}\n            enableGridX={false}\n            enableGridY={false}\n            colors={{scheme: \"red_yellow_green\"}}\n            enablePoints={false}\n            pointSize={10}\n            pointColor={{theme: 'background'}}\n            pointBorderWidth={2}\n            pointBorderColor={{from: 'serieColor', modifiers: []}}\n            pointLabelYOffset={-12}\n            areaOpacity={0.15}\n            isInteractive={true}\n            legends={[{\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            }]}\n        />\n    </div>);\n}\n\n\nexport default LineChart;","import {BikeStats, DetailedMonthData, norwegianMonths} from \"./types\";\n\nexport function addTripToSimpleDictionary(dictionary: { [key: string]: number }, key: string | number) {\n    const entryYear = dictionary[key];\n    if (entryYear) {\n        dictionary[key] = entryYear + 1;\n    } else {\n        dictionary[key] = 1;\n    }\n}\n\nexport function addTripToDetailedMonthsDataDictionary(monthsData: { [p: string]: DetailedMonthData }, key: string, date: Date, year: string) {\n    const entryMonth = monthsData[key];\n    if (entryMonth) {\n        monthsData[key].trips = monthsData[key].trips + 1;\n    } else {\n        monthsData[key] = {\n            year: date.getFullYear(),\n            yearString: year,\n            monthName: norwegianMonths[date.getMonth()],\n            trips: 1,\n            monthNumber: date.getMonth() + 1,\n            date: date\n        }\n    }\n}\n\nexport function buildDataStructure(data: any): BikeStats {\n    let years: { [key: string]: number } = {}\n    let months: { [key: string]: number } = {}\n    let stations: { [key: string]: number } = {}\n    let detailedMonthsData: { [key: string]: DetailedMonthData } = {}\n    let numberOfTrips = data.length\n\n    data.forEach((trip: any) => {\n        const date = new Date(trip._tripStarted)\n        const year = date.getFullYear().toString();\n        const month = norwegianMonths[date.getMonth()] + \" \" + year;\n        const mmyyyy = date.getMonth() + \" \" + year;\n        const startStation = trip._startStation._title;\n        const endStation = trip._endStation ? trip._endStation._title : trip._startStation._title;\n\n        addTripToSimpleDictionary(years, year);\n        addTripToSimpleDictionary(months, month);\n        addTripToSimpleDictionary(stations, startStation);\n        addTripToSimpleDictionary(stations, endStation);\n        addTripToDetailedMonthsDataDictionary(detailedMonthsData, mmyyyy, date, year)\n    })\n    return {\n        years: years,\n        months: months,\n        stations: stations,\n        detailedMonthsData: detailedMonthsData,\n        numberOfTrips: numberOfTrips\n    }\n}\n\nexport function simpleDictionaryToSortedArray(dict: { [key: string]: number }) {\n    return Object.entries(dict)\n        .sort(([, numberOfTrips1], [, numberOfTrips2]) =>\n            numberOfTrips2 - numberOfTrips1)\n\n}","import './App.css';\nimport data from \"./trips.json\";\nimport logo from \"./svg/bysykkel-logo.svg\";\nimport bike from \"./svg/bike.svg\";\nimport React from 'react';\nimport PieChart from \"./PieChart\";\nimport LineChart from \"./LineChart\";\nimport {buildDataStructure, simpleDictionaryToSortedArray} from \"./utils\";\n\nfunction App() {\n    const bikeStats = buildDataStructure(data);\n\n    const monthsSortedDescendingTrips = simpleDictionaryToSortedArray(bikeStats.months)\n    const stationsSortedDescendingTrips = simpleDictionaryToSortedArray(bikeStats.stations)\n\n    return (\n        <div className=\"container\">\n            <div className=\"header\">\n                <div>\n                    <img className=\"header-logo\" src={logo} alt=\"Header logo\"/>\n                </div>\n                <div className=\"header-text\">\n                    <h1>Statistikk</h1>\n                </div>\n            </div>\n\n            <div className=\"trips-element\">\n                <div className=\"trips-text\">\n                    <h2>Du har syklet totalt <em className=\"extra-emphasis\">{bikeStats.numberOfTrips} turer</em></h2>\n                    <PieChart years={bikeStats.years}/>\n                </div>\n\n            </div>\n            <div className=\"popular-month\">\n                <h2>Din mest populære måned var <em> {monthsSortedDescendingTrips[0][0].toLowerCase()},\n                </em> med {monthsSortedDescendingTrips[0][1]} turer.</h2>\n                <LineChart years={bikeStats.years} monthsData={bikeStats.detailedMonthsData}/>\n\n            </div>\n            <div className=\"number-of-stations\">\n                <h2 className=\"number-of-stations-heading\"> Du har besøkt {stationsSortedDescendingTrips.length} ulike\n                    stasjoner.</h2>\n                <img className=\"bike-logo\" src={bike} alt=\"Bike\"/>\n            </div>\n            <div className=\"top-5\">\n                <h2>Topp 5 stasjoner</h2>\n                <tbody>\n                <table className=\"styled-table\">\n                    {stationsSortedDescendingTrips.slice(0, 5).map(([month, numberOfTripsPerMonth]) => (\n                        <tr key={month}>\n                            <td className=\"td-month\">{month}</td>\n                            <td>{numberOfTripsPerMonth}</td>\n                        </tr>\n                    ))}\n                </table>\n                </tbody>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}