{"version":3,"sources":["types.ts","utils.ts","PieChart.tsx","LineChart.tsx","svg/bike.svg","Statistics.tsx","svg/bysykkel-logo.svg","Header.tsx","Footer.tsx","App.tsx","index.js"],"names":["norwegianMonths","addTripToSimpleDictionary","dictionary","key","entryYear","buildDataStructure","data","years","months","stations","detailedMonthsData","numberOfTrips","length","forEach","trip","date","Date","_tripStarted","year","getFullYear","toString","month","getMonth","mmyyyy","startStation","_startStation","_title","endStation","_endStation","monthsData","trips","yearString","monthName","monthNumber","addTripToDetailedMonthsDataDictionary","simpleDictionaryToSortedArray","dict","Object","entries","sort","numberOfTrips1","PieChart","props","pies","map","label","id","value","className","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","theme","fontSize","activeOuterRadiusOffset","colors","scheme","borderWidth","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsTextColor","isInteractive","legends","LineChart","smallScreen","window","matchMedia","matches","allYearsWithMonths","color","x","y","monthData","find","m","getAllMonthsInYearArray","xScale","type","yScale","min","max","stacked","reverse","yFormat","curve","axisTop","axisRight","lineWidth","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","enableGridX","enableGridY","enablePoints","pointSize","pointColor","pointBorderWidth","pointBorderColor","pointLabelYOffset","areaOpacity","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","Statistics","bikeStats","tripsData","monthsSortedDescendingTrips","stationsSortedDescendingTrips","toLowerCase","src","bike","alt","slice","numberOfTripsPerMonth","console","log","Header","to","logo","Footer","icon","faEnvelope","href","faLinkedin","App","history","useHistory","useState","setTripsData","onDrop","useCallback","acceptedFiles","reader","FileReader","onload","textResult","result","jsonFile","JSON","parse","push","readAsText","useDropzone","getRootProps","getInputProps","isDragActive","path","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5abc2eec.chunk.js","sourcesContent":["export const norwegianMonths =\n    [\"Januar\", \"Februar\", \"Mars\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Desember\"];\n\nexport interface DetailedMonthData {\n    monthNumber: number;\n    monthName: string;\n    year: number;\n    trips: number;\n    date: Date;\n    yearString: string;\n}\n\nexport interface BikeStats {\n    years: { [key: string]: number };\n    months: { [key: string]: number };\n    stations: { [key: string]: number };\n    detailedMonthsData: { [key: string]: DetailedMonthData };\n    numberOfTrips: number;\n}","import {BikeStats, DetailedMonthData, norwegianMonths} from \"./types\";\n\nexport function addTripToSimpleDictionary(dictionary: { [key: string]: number }, key: string | number) {\n    const entryYear = dictionary[key];\n    if (entryYear) {\n        dictionary[key] = entryYear + 1;\n    } else {\n        dictionary[key] = 1;\n    }\n}\n\nexport function addTripToDetailedMonthsDataDictionary(monthsData: { [p: string]: DetailedMonthData }, key: string, date: Date, year: string) {\n    const entryMonth = monthsData[key];\n    if (entryMonth) {\n        monthsData[key].trips = monthsData[key].trips + 1;\n    } else {\n        monthsData[key] = {\n            year: date.getFullYear(),\n            yearString: year,\n            monthName: norwegianMonths[date.getMonth()],\n            trips: 1,\n            monthNumber: date.getMonth() + 1,\n            date: date\n        }\n    }\n}\n\nexport function buildDataStructure(data: any): BikeStats {\n    let years: { [key: string]: number } = {}\n    let months: { [key: string]: number } = {}\n    let stations: { [key: string]: number } = {}\n    let detailedMonthsData: { [key: string]: DetailedMonthData } = {}\n    const numberOfTrips = data.length\n\n    data.forEach((trip: any) => {\n        const date = new Date(trip._tripStarted)\n        const year = date.getFullYear().toString();\n        const month = norwegianMonths[date.getMonth()] + \" \" + year;\n        const mmyyyy = date.getMonth() + \" \" + year;\n        const startStation = trip._startStation._title;\n        const endStation = trip._endStation ? trip._endStation._title : trip._startStation._title;\n\n        addTripToSimpleDictionary(years, year);\n        addTripToSimpleDictionary(months, month);\n        addTripToSimpleDictionary(stations, startStation);\n        addTripToSimpleDictionary(stations, endStation);\n        addTripToDetailedMonthsDataDictionary(detailedMonthsData, mmyyyy, date, year)\n    })\n    return {\n        years: years,\n        months: months,\n        stations: stations,\n        detailedMonthsData: detailedMonthsData,\n        numberOfTrips: numberOfTrips\n    }\n}\n\nexport function simpleDictionaryToSortedArray(dict: { [key: string]: number }) {\n    return Object.entries(dict)\n        .sort(([, numberOfTrips1], [, numberOfTrips2]) =>\n            numberOfTrips2 - numberOfTrips1)\n\n}","import './App.css';\nimport React from 'react';\nimport {ResponsivePie} from '@nivo/pie'\n\ninterface Props {\n    years: { [key: string]: number };\n}\n\ninterface PieData {\n    id: string;\n    value: number;\n    label: string;\n}\n\nconst PieChart = (props: Props) => {\n    const pies = Object.entries(props.years).map(([year, numberOfTrips]) => {\n            const piePart: PieData =\n                {\n                    label: year,\n                    id: year,\n                    value: numberOfTrips\n                }\n            return piePart;\n        }\n    )\n    return (\n        <div className=\"pie-element\">\n            <ResponsivePie\n                data={pies}\n                margin={{top: 40, right: 80, bottom: 80, left: 80}}\n                innerRadius={0.5}\n                padAngle={0.7}\n                cornerRadius={3}\n                theme={{fontSize:14}}\n                activeOuterRadiusOffset={8}\n                colors={{scheme: 'red_yellow_green'}}\n                borderWidth={1}\n                borderColor={{from: 'color', modifiers: [['darker', 0]]}}\n                arcLinkLabelsSkipAngle={0}\n                arcLinkLabelsTextColor=\"#333333\"\n                arcLinkLabelsThickness={4}\n                arcLinkLabelsColor={{from: 'color'}}\n                arcLabelsTextColor={{from: 'color', modifiers: [['darker', 2]]}}\n                isInteractive={true}\n                legends={[]}\n            />\n        </div>\n    )\n}\n\n\nexport default PieChart;\n","import './App.css';\nimport React from 'react';\nimport {ResponsiveLine} from '@nivo/line';\nimport {DetailedMonthData, norwegianMonths} from \"./types\";\n\ninterface Props {\n    years: { [key: string]: number };\n    monthsData: { [key: string]: DetailedMonthData }\n}\n\ninterface LineChartDataYear {\n    id: string; // Year\n    color: string; // Not used?\n    data: LineChartDataMonth[]\n}\n\ninterface LineChartDataMonth {\n    x: string; // Month\n    y: number; // Trips\n}\n\nconst LineChart = (props: Props) => {\n\n    function getAllMonthsInYearArray() {\n        let allYearsWithMonths: LineChartDataYear[] = Object.entries(props.years).map(([year, _]) => {\n                let emptyMonths: LineChartDataMonth[] = norwegianMonths.map(month => {\n                        return {x: month, y: 0}\n                    }\n                )\n                return {\n                    id: year,\n                    color: \"red\",\n                    data: emptyMonths\n                }\n\n            }\n        )\n\n        Object.entries(props.monthsData).forEach(([monthKey, monthData]) => {\n                let year = allYearsWithMonths.find(y => y.id === monthData.yearString);\n                if (year) {\n                    let month = year.data.find(m => m.x === monthData.monthName)\n                    if (month) {\n                        month.y = monthData.trips;\n                    }\n                }\n            }\n        )\n\n\n        return allYearsWithMonths\n    }\n\n    function smallScreen() {\n        const mediaMatch = window.matchMedia('(max-width: 900px)');\n        return mediaMatch.matches;\n    }\n\n    return (<div className=\"line-chart-element\">\n        <ResponsiveLine\n            data={getAllMonthsInYearArray()}\n            margin={{top: 50, right: smallScreen() ? 30 : 110, bottom: 50, left: 60}}\n            xScale={{type: 'point'}}\n            yScale={{type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false}}\n            yFormat=\" >-.2f\"\n            curve=\"basis\"\n            axisTop={null}\n            axisRight={null}\n            lineWidth={6}\n            axisBottom={{\n                orient: 'bottom',\n                tickSize: 4,\n                tickPadding: 4,\n                tickRotation: smallScreen() ? -40 : 0,\n                legend: '',\n                legendOffset: -60,\n                legendPosition: 'middle'\n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Antall turer',\n                legendOffset: -40,\n                legendPosition: 'middle'\n            }}\n            enableGridX={false}\n            enableGridY={false}\n            colors={[\"#F98404\", \"#d73027\", \"#fee08b\", \"#FFC947\", \"#a50026\", \"#f46d43\", \"#5d0013\"]}\n            enablePoints={false}\n            pointSize={10}\n            pointColor={{theme: 'background'}}\n            pointBorderWidth={2}\n            pointBorderColor={{from: 'serieColor', modifiers: []}}\n            pointLabelYOffset={-12}\n            areaOpacity={0.15}\n            isInteractive={true}\n            legends={[{\n                anchor: smallScreen() ? 'top-right' : 'bottom-right',\n                direction: smallScreen() ? 'row' : 'column',\n                justify: false,\n                translateX: smallScreen() ? -20 : 100,\n                translateY: 0,\n                itemsSpacing: smallScreen() ? 30 : 0,\n                itemDirection: 'left-to-right',\n                itemWidth: smallScreen() ? 20 : 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: smallScreen() ? 10 : 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            }]}\n        />\n    </div>);\n}\n\n\nexport default LineChart;","export default __webpack_public_path__ + \"static/media/bike.25010c39.svg\";","import './App.css';\nimport React from 'react';\nimport {buildDataStructure, simpleDictionaryToSortedArray} from \"./utils\";\nimport PieChart from \"./PieChart\";\nimport LineChart from \"./LineChart\";\nimport bike from \"./svg/bike.svg\";\n\n\ninterface Props {\n    tripsData: any;\n}\n\nconst Statistics = (props: Props) => {\n    const bikeStats = buildDataStructure(props.tripsData);\n    const monthsSortedDescendingTrips = simpleDictionaryToSortedArray(bikeStats.months)\n    const stationsSortedDescendingTrips = simpleDictionaryToSortedArray(bikeStats.stations)\n\n    return (\n        <div className=\"container\">\n            <div className=\"trips-element\">\n                <div className=\"trips-text\">\n                    <h2>Du har syklet totalt <em className=\"extra-emphasis\">{bikeStats.numberOfTrips} turer</em></h2>\n                    <PieChart years={bikeStats.years}/>\n                </div>\n            </div>\n            <div className=\"popular-month\">\n                <h2>Din mest populære måned var <em> {monthsSortedDescendingTrips[0][0].toLowerCase()}</em>,\n                 med {monthsSortedDescendingTrips[0][1]} turer.</h2>\n                <LineChart years={bikeStats.years} monthsData={bikeStats.detailedMonthsData}/>\n            </div>\n            <div className=\"number-of-stations\">\n                <h2 className=\"number-of-stations-heading\"> Du har besøkt {stationsSortedDescendingTrips.length} ulike\n                    stasjoner.</h2>\n                <img className=\"bike-logo\" src={bike} alt=\"Bike\"/>\n            </div>\n            <div className=\"top-5\">\n                <table className=\"styled-table\">\n                    <tbody>\n                    <tr>\n                        <th className=\"td-header\">Topp 5 stasjoner</th>\n                    </tr>\n                    {stationsSortedDescendingTrips.slice(0, 5).map(([month, numberOfTripsPerMonth]) => (\n                        <tr key={month}>\n                            <td className=\"td-month\">{month}</td>\n                            <td>{numberOfTripsPerMonth}</td>\n                        </tr>\n                    ))}\n                    {console.log(stationsSortedDescendingTrips)}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Statistics;\n","export default __webpack_public_path__ + \"static/media/bysykkel-logo.31fbc9f8.svg\";","import logo from \"./svg/bysykkel-logo.svg\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\"\n\nconst Header = () => {\n    return (\n        <Link to=\"/bysykkel-stat\" className=\"header\">\n            <div>\n                <img className=\"header-logo\" src={logo} alt=\"Header logo\"/>\n            </div>\n            <div className=\"header-text\">\n                <h1>Statistikk</h1>\n            </div>\n        </Link>)\n}\n\nexport default Header;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEnvelope} from '@fortawesome/free-solid-svg-icons'\nimport {faLinkedin} from '@fortawesome/free-brands-svg-icons'\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"footer-container\">\n                <h3>Kontakt </h3>\n                <ul className=\"contact-list\">\n                    <li className=\"contact-element\">\n                        <div className=\"icon\"><FontAwesomeIcon icon={faEnvelope}/> </div>\n                        <a href=\"mailto:malinaandahl@gmail.com\">malinaandahl@gmail.com</a>\n                    </li>\n                    <li className=\"contact-element\">\n                            <div className=\"icon\"><FontAwesomeIcon icon={faLinkedin}/> </div>\n                            <a href=\"https://www.linkedin.com/in/malinaandahl/\">Malin Aandahl</a>\n                    </li>\n                </ul>\n            </div>\n        </div>)}\n\nexport default Footer;","import './App.css';\nimport data from \"./trips.json\";\nimport React, {useCallback, useState} from 'react';\nimport Statistics from \"./Statistics\";\nimport {useDropzone} from 'react-dropzone'\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport {Link, Route, useHistory, Switch} from \"react-router-dom\";\n\nfunction App() {\n    const history = useHistory();\n    const [tripsData, setTripsData] = useState(data);\n    const onDrop = useCallback(acceptedFiles => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const textResult = reader.result;\n            if (typeof (textResult) === \"string\") {\n                const jsonFile = JSON.parse(textResult);\n                setTripsData(jsonFile);\n                history.push('/statistikk');\n            }\n        };\n        reader.readAsText(acceptedFiles[0])\n    }, [])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    return (\n        <>\n            <Header/>\n            <Switch>\n                <Route path=\"/statistikk\">\n                    <Statistics tripsData={tripsData}/>\n                </Route>\n                <Route>\n                    <div className=\"pre-page\">\n                        <div className=\"download-data-guide\">\n                            <h3>Last opp dine data</h3>\n                            <ol>\n                                <li>Logg inn med din bruker på <a href=\"https://oslobysykkel.no/\" target=\"_blank\" className=\"oslo-bysykkel-link\">Oslo Bysykkel</a>.</li>\n                                <li>Trykk på  <span className=\"links\">Dine data</span>.</li>\n                                <li>Trykk på <span className=\"links\">Lag nye filer</span>.</li>\n                                <li>Trykk på <span className=\"links\">Lag JSON-filer</span>.</li>\n                                <li>Når den er klar, trykk <span className=\"links\">LAST NED FIL.</span></li>\n                                <li>Åpne zip-filen.</li>\n                                <li>Last opp kun <span className=\"links\">trips.json</span>.</li>\n                            </ol>\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                {\n                                    isDragActive ?\n                                        <p>Dra trip.json hit</p> :\n                                        <button>Last opp trips.json</button>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"example-stat\">\n                            <h3>... eller se eksempel på statistikk her</h3>\n                            <Link to=\"/statistikk\">\n                                <button>Se eksempelstatistikk</button>\n                            </Link>\n                        </div>\n\n                    </div>\n                </Route>\n            </Switch>\n            <Footer/>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <App />\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}