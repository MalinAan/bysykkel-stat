{"version":3,"sources":["types.ts","utils.ts","PieChart.tsx","LineChart.tsx","svg/bike.svg","Statistics.tsx","svg/bysykkel-logo.svg","Header.tsx","App.tsx","index.js"],"names":["norwegianMonths","addTripToSimpleDictionary","dictionary","key","entryYear","buildDataStructure","data","years","months","stations","detailedMonthsData","numberOfTrips","length","forEach","trip","date","Date","_tripStarted","year","getFullYear","toString","month","getMonth","mmyyyy","startStation","_startStation","_title","endStation","_endStation","monthsData","trips","yearString","monthName","monthNumber","addTripToDetailedMonthsDataDictionary","simpleDictionaryToSortedArray","dict","Object","entries","sort","numberOfTrips1","PieChart","props","pies","map","label","id","value","className","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","theme","fontSize","activeOuterRadiusOffset","colors","scheme","borderWidth","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsTextColor","isInteractive","legends","LineChart","allYearsWithMonths","color","x","y","monthData","find","m","getAllMonthsInYearArray","xScale","type","yScale","min","max","stacked","reverse","yFormat","curve","axisTop","axisRight","lineWidth","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","enableGridX","enableGridY","enablePoints","pointSize","pointColor","pointBorderWidth","pointBorderColor","pointLabelYOffset","areaOpacity","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","Statistics","bikeStats","tripsData","monthsSortedDescendingTrips","stationsSortedDescendingTrips","toLowerCase","src","bike","alt","slice","numberOfTripsPerMonth","Header","logo","App","useState","setTripsData","showStatistics","setShowStatistics","onDrop","useCallback","acceptedFiles","reader","FileReader","onload","textResult","result","jsonFile","JSON","parse","readAsText","useDropzone","getRootProps","getInputProps","isDragActive","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b01673d.chunk.js","sourcesContent":["export const norwegianMonths =\n    [\"Januar\", \"Februar\", \"Mars\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Desember\"];\n\nexport interface DetailedMonthData {\n    monthNumber: number;\n    monthName: string;\n    year: number;\n    trips: number;\n    date: Date;\n    yearString: string;\n}\n\nexport interface BikeStats {\n    years: { [key: string]: number };\n    months: { [key: string]: number };\n    stations: { [key: string]: number };\n    detailedMonthsData: { [key: string]: DetailedMonthData };\n    numberOfTrips: number;\n}","import {BikeStats, DetailedMonthData, norwegianMonths} from \"./types\";\n\nexport function addTripToSimpleDictionary(dictionary: { [key: string]: number }, key: string | number) {\n    const entryYear = dictionary[key];\n    if (entryYear) {\n        dictionary[key] = entryYear + 1;\n    } else {\n        dictionary[key] = 1;\n    }\n}\n\nexport function addTripToDetailedMonthsDataDictionary(monthsData: { [p: string]: DetailedMonthData }, key: string, date: Date, year: string) {\n    const entryMonth = monthsData[key];\n    if (entryMonth) {\n        monthsData[key].trips = monthsData[key].trips + 1;\n    } else {\n        monthsData[key] = {\n            year: date.getFullYear(),\n            yearString: year,\n            monthName: norwegianMonths[date.getMonth()],\n            trips: 1,\n            monthNumber: date.getMonth() + 1,\n            date: date\n        }\n    }\n}\n\nexport function buildDataStructure(data: any): BikeStats {\n    let years: { [key: string]: number } = {}\n    let months: { [key: string]: number } = {}\n    let stations: { [key: string]: number } = {}\n    let detailedMonthsData: { [key: string]: DetailedMonthData } = {}\n    const numberOfTrips = data.length\n\n    data.forEach((trip: any) => {\n        const date = new Date(trip._tripStarted)\n        const year = date.getFullYear().toString();\n        const month = norwegianMonths[date.getMonth()] + \" \" + year;\n        const mmyyyy = date.getMonth() + \" \" + year;\n        const startStation = trip._startStation._title;\n        const endStation = trip._endStation ? trip._endStation._title : trip._startStation._title;\n\n        addTripToSimpleDictionary(years, year);\n        addTripToSimpleDictionary(months, month);\n        addTripToSimpleDictionary(stations, startStation);\n        addTripToSimpleDictionary(stations, endStation);\n        addTripToDetailedMonthsDataDictionary(detailedMonthsData, mmyyyy, date, year)\n    })\n    return {\n        years: years,\n        months: months,\n        stations: stations,\n        detailedMonthsData: detailedMonthsData,\n        numberOfTrips: numberOfTrips\n    }\n}\n\nexport function simpleDictionaryToSortedArray(dict: { [key: string]: number }) {\n    return Object.entries(dict)\n        .sort(([, numberOfTrips1], [, numberOfTrips2]) =>\n            numberOfTrips2 - numberOfTrips1)\n\n}","import './App.css';\nimport React from 'react';\nimport {ResponsivePie} from '@nivo/pie'\n\ninterface Props {\n    years: { [key: string]: number };\n}\n\ninterface PieData {\n    id: string;\n    value: number;\n    label: string;\n}\n\nconst PieChart = (props: Props) => {\n    const pies = Object.entries(props.years).map(([year, numberOfTrips]) => {\n            const piePart: PieData =\n                {\n                    label: year,\n                    id: year,\n                    value: numberOfTrips\n                }\n            return piePart;\n        }\n    )\n    return (\n        <div className=\"pie-element\">\n            <ResponsivePie\n                data={pies}\n                margin={{top: 40, right: 80, bottom: 80, left: 80}}\n                innerRadius={0.5}\n                padAngle={0.7}\n                cornerRadius={3}\n                theme={{fontSize:14}}\n                activeOuterRadiusOffset={8}\n                colors={{scheme: 'red_yellow_green'}}\n                borderWidth={1}\n                borderColor={{from: 'color', modifiers: [['darker', 0]]}}\n                arcLinkLabelsSkipAngle={0}\n                arcLinkLabelsTextColor=\"#333333\"\n                arcLinkLabelsThickness={4}\n                arcLinkLabelsColor={{from: 'color'}}\n                arcLabelsTextColor={{from: 'color', modifiers: [['darker', 2]]}}\n                isInteractive={true}\n                legends={[]}\n            />\n        </div>\n    )\n}\n\n\nexport default PieChart;\n","import './App.css';\nimport React from 'react';\nimport {ResponsiveLine} from '@nivo/line';\nimport {DetailedMonthData, norwegianMonths} from \"./types\";\n\ninterface Props {\n    years: { [key: string]: number };\n    monthsData: { [key: string]: DetailedMonthData }\n}\n\ninterface LineChartDataYear {\n    id: string; // Year\n    color: string; // Not used?\n    data: LineChartDataMonth[]\n}\n\ninterface LineChartDataMonth {\n    x: string; // Month\n    y: number; // Trips\n}\n\nconst LineChart = (props: Props) => {\n\n    function getAllMonthsInYearArray() {\n\n\n        let allYearsWithMonths: LineChartDataYear[] = Object.entries(props.years).map(([year, _]) => {\n                let emptyMonths: LineChartDataMonth[] = norwegianMonths.map(month => {\n                        return {x: month, y: 0}\n                    }\n                )\n                return {\n                    id: year,\n                    color: \"red\",\n                    data: emptyMonths\n                }\n\n            }\n        )\n\n        Object.entries(props.monthsData).forEach(([monthKey, monthData]) => {\n                let year = allYearsWithMonths.find(y => y.id === monthData.yearString);\n                if (year) {\n                    let month = year.data.find(m => m.x === monthData.monthName)\n                    if (month) {\n                        month.y = monthData.trips;\n                    }\n                }\n            }\n        )\n\n        return allYearsWithMonths\n    }\n\n    return (<div className=\"line-chart-element\">\n        <ResponsiveLine\n            data={getAllMonthsInYearArray()}\n            margin={{top: 50, right: 110, bottom: 50, left: 60}}\n            xScale={{type: 'point'}}\n            yScale={{type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false}}\n            yFormat=\" >-.2f\"\n            curve=\"basis\"\n            axisTop={null}\n            axisRight={null}\n            lineWidth={6}\n            axisBottom={{\n                orient: 'bottom',\n                tickSize: 4,\n                tickPadding: 4,\n                tickRotation: 0,\n                legend: '',\n                legendOffset: -60,\n                legendPosition: 'middle'\n            }}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Antall turer',\n                legendOffset: -40,\n                legendPosition: 'middle'\n            }}\n            enableGridX={false}\n            enableGridY={false}\n            colors={{scheme: \"red_yellow_green\"}}\n            enablePoints={false}\n            pointSize={10}\n            pointColor={{theme: 'background'}}\n            pointBorderWidth={2}\n            pointBorderColor={{from: 'serieColor', modifiers: []}}\n            pointLabelYOffset={-12}\n            areaOpacity={0.15}\n            isInteractive={true}\n            legends={[{\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            }]}\n        />\n    </div>);\n}\n\n\nexport default LineChart;","export default __webpack_public_path__ + \"static/media/bike.25010c39.svg\";","import './App.css';\nimport React from 'react';\nimport {buildDataStructure, simpleDictionaryToSortedArray} from \"./utils\";\nimport PieChart from \"./PieChart\";\nimport LineChart from \"./LineChart\";\nimport bike from \"./svg/bike.svg\";\n\n\ninterface Props {\n    tripsData: any;\n}\n\nconst Statistics = (props: Props) => {\n    const bikeStats = buildDataStructure(props.tripsData);\n    const monthsSortedDescendingTrips = simpleDictionaryToSortedArray(bikeStats.months)\n    const stationsSortedDescendingTrips = simpleDictionaryToSortedArray(bikeStats.stations)\n\n    return (\n        <div className=\"container\">\n            <div className=\"trips-element\">\n                <div className=\"trips-text\">\n                    <h2>Du har syklet totalt <em className=\"extra-emphasis\">{bikeStats.numberOfTrips} turer</em></h2>\n                    <PieChart years={bikeStats.years}/>\n                </div>\n\n            </div>\n            <div className=\"popular-month\">\n                <h2>Din mest populære måned var <em> {monthsSortedDescendingTrips[0][0].toLowerCase()}</em>,\n                 med {monthsSortedDescendingTrips[0][1]} turer.</h2>\n                <LineChart years={bikeStats.years} monthsData={bikeStats.detailedMonthsData}/>\n\n            </div>\n            <div className=\"number-of-stations\">\n                <h2 className=\"number-of-stations-heading\"> Du har besøkt {stationsSortedDescendingTrips.length} ulike\n                    stasjoner.</h2>\n                <img className=\"bike-logo\" src={bike} alt=\"Bike\"/>\n            </div>\n            <div className=\"top-5\">\n\n                <table className=\"styled-table\">\n                    <tbody>\n                    <tr>\n                        <th className=\"td-header\">Topp 5 stasjoner</th>\n                    </tr>\n                    {stationsSortedDescendingTrips.slice(0, 5).map(([month, numberOfTripsPerMonth]) => (\n                        <tr key={month}>\n                            <td className=\"td-month\">{month}</td>\n                            <td>{numberOfTripsPerMonth}</td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Statistics;","export default __webpack_public_path__ + \"static/media/bysykkel-logo.95909212.svg\";","import logo from \"./svg/bysykkel-logo.svg\";\nimport React from \"react\";\nconst Header = () => {\n    return (\n<div className=\"header\">\n    <div>\n        <img className=\"header-logo\" src={logo} alt=\"Header logo\"/>\n    </div>\n    <div className=\"header-text\">\n        <h1>Statistikk</h1>\n    </div>\n</div>)}\n\nexport default Header;","import './App.css';\nimport data from \"./trips.json\";\nimport React, {useCallback, useState} from 'react';\nimport Statistics from \"./Statistics\";\nimport {useDropzone} from 'react-dropzone'\nimport Header from \"./Header\";\n\nfunction App() {\n    const [tripsData, setTripsData] = useState(data);\n    const [showStatistics, setShowStatistics] = useState(false);\n    const onDrop = useCallback(acceptedFiles => {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const textResult = reader.result;\n            if (typeof (textResult) === \"string\") {\n                const jsonFile = JSON.parse(textResult);\n                setTripsData(jsonFile);\n                setShowStatistics(true);\n            }\n        };\n        reader.readAsText(acceptedFiles[0])\n    }, [])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n    return (\n        <div>\n            <Header/>\n            {!showStatistics && <div className=\"pre-page\">\n                <div className=\"download-data-guide\">\n                    <h3>Last opp din data</h3>\n                    <ol>\n                        <li>Logg inn med din bruker på oslobysykkel.no.</li>\n                        <li>Trykk på “Dine data”.</li>\n                        <li>Trykk på “Lag nye filer”.</li>\n                        <li>Trykk på “Lag JSON-filer”.</li>\n                        <li>Når den er klar, trykk “LAST NED FIL”.</li>\n                        <li>Åpne zip-filen.</li>\n                        <li>Last opp kun trips.json.</li>\n                    </ol>\n                    <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {\n                            isDragActive ?\n                                <p>Dra trip.json hit</p> :\n                                <button>Last opp trips.json her.</button>\n                        }\n                    </div>\n                </div>\n                <div className=\"example-stat\">\n                    <h3>... eller se eksempel på statistikk her</h3>\n                    <button onClick={\n                        () => setShowStatistics(true)\n                    }>Se eksempelstatistikk</button>\n                </div>\n\n            </div>}\n            {showStatistics && <Statistics tripsData={tripsData}/>}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}